"""add all tables

Revision ID: 1c9e9399998e
Revises: 
Create Date: 2025-05-21 12:23:48.938505

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '1c9e9399998e'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('mcp_model',
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('mcp_name', sa.String(), nullable=False),
    sa.Column('sse_url', sa.String(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('inactive', sa.Boolean(), nullable=True),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('command', sa.String(), nullable=True),
    sa.Column('args', sa.JSON(), nullable=True),
    sa.Column('env_vars', sa.JSON(), nullable=True),
    sa.Column('source', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('model_configs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('slug', sa.String(), nullable=True),
    sa.Column('engine', sa.String(), nullable=True),
    sa.Column('api_key_name', sa.String(), nullable=True),
    sa.Column('icon', sa.String(), nullable=True),
    sa.Column('enabled', sa.Boolean(), nullable=True),
    sa.Column('rank', sa.Integer(), nullable=True),
    sa.Column('accept_image', sa.Boolean(), nullable=True),
    sa.Column('max_tokens', sa.Integer(), nullable=True),
    sa.Column('provider', sa.String(), nullable=True),
    sa.Column('base_url', sa.String(), nullable=True),
    sa.Column('is_premium', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_model_configs_id'), 'model_configs', ['id'], unique=False)
    op.create_index(op.f('ix_model_configs_name'), 'model_configs', ['name'], unique=True)
    op.create_index(op.f('ix_model_configs_slug'), 'model_configs', ['slug'], unique=True)
    op.create_table('request_logger',
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user', sa.String(), nullable=True),
    sa.Column('request_type', sa.String(), nullable=True),
    sa.Column('tokens', sa.Integer(), nullable=True),
    sa.Column('url', sa.String(), nullable=True),
    sa.Column('header', sa.String(), nullable=True),
    sa.Column('body', sa.String(), nullable=True),
    sa.Column('response', sa.String(), nullable=True),
    sa.Column('model', sa.String(), nullable=True),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_preference',
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_email', sa.String(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_preference_user_email'), 'user_preference', ['user_email'], unique=True)
    op.create_table('thread',
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('user_email', sa.String(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('alternate_id', sa.Integer(), nullable=True),
    sa.Column('product', sa.Enum('CO_PILOT', 'DOC_CREATOR', 'DEVAS', 'MERMAID', 'AGENTIX', name='fynixproducts'), nullable=False),
    sa.Column('meta', sa.JSON(), nullable=True),
    sa.Column('last_message_id', sa.Integer(), nullable=True),
    sa.Column('org_id', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_thread_org_id'), 'thread', ['org_id'], unique=False)
    op.create_index('ix_thread_user_email_product_is_deleted', 'thread', ['user_email', 'product', 'is_deleted'], unique=False)
    op.create_index(op.f('ix_thread_uuid'), 'thread', ['uuid'], unique=True)
    op.create_table('thread_message',
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('thread_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('parent_message_id', sa.Integer(), nullable=True),
    sa.Column('content', sa.String(), nullable=True),
    sa.Column('role', sa.Enum('USER', 'SYSTEM', 'ASSISTANT', name='role'), nullable=True),
    sa.Column('display_text', sa.String(), nullable=True),
    sa.Column('is_json', sa.Boolean(), nullable=True),
    sa.Column('is_disliked', sa.Boolean(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('question_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('prompt_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['parent_message_id'], ['thread_message.id'], ),
    sa.ForeignKeyConstraint(['thread_uuid'], ['thread.uuid'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_thread_message_thread_uuid'), 'thread_message', ['thread_uuid'], unique=False)
    op.create_table('thread_message_summary',
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('thread_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('thread_message_id', sa.Integer(), nullable=True),
    sa.Column('summary', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['thread_message_id'], ['thread_message.id'], ),
    sa.ForeignKeyConstraint(['thread_uuid'], ['thread.uuid'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_thread_message_summary_thread_uuid'), 'thread_message_summary', ['thread_uuid'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_thread_message_summary_thread_uuid'), table_name='thread_message_summary')
    op.drop_table('thread_message_summary')
    op.drop_index(op.f('ix_thread_message_thread_uuid'), table_name='thread_message')
    op.drop_table('thread_message')
    op.drop_index(op.f('ix_thread_uuid'), table_name='thread')
    op.drop_index('ix_thread_user_email_product_is_deleted', table_name='thread')
    op.drop_index(op.f('ix_thread_org_id'), table_name='thread')
    op.drop_table('thread')
    op.drop_index(op.f('ix_user_preference_user_email'), table_name='user_preference')
    op.drop_table('user_preference')
    op.drop_table('request_logger')
    op.drop_index(op.f('ix_model_configs_slug'), table_name='model_configs')
    op.drop_index(op.f('ix_model_configs_name'), table_name='model_configs')
    op.drop_index(op.f('ix_model_configs_id'), table_name='model_configs')
    op.drop_table('model_configs')
    op.drop_table('mcp_model')
    # ### end Alembic commands ###
